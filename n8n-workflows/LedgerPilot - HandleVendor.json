{
  "name": "LedgerPilot - HandleVendor",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0232fdff-9ca1-4beb-b99a-1d92b37b936b",
              "name": "invoice_id",
              "value": "={{ $json.invoice_id }}",
              "type": "string"
            },
            {
              "id": "74a5df82-a2a0-442d-b3f6-1e0aaff1d96e",
              "name": "access_token",
              "value": "={{ $json.access_token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1568,
        384
      ],
      "id": "234af996-1150-4da8-ae28-c81c740a546c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "invoices",
        "filters": {
          "conditions": [
            {
              "keyName": "invoice_id",
              "keyValue": "={{ $json.invoice_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1360,
        384
      ],
      "id": "5e3c4348-e34f-4596-87b2-7003287f482d",
      "name": "get invoice",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Mode: Run Once for All Items (works in Run Once per Item too)\nconst items = $input.all();\n\n// treat as \"non-empty\" if any item has JSON or binary content\nconst hasData = items.some(i =>\n  (i.json && Object.keys(i.json || {}).length > 0) ||\n  (i.binary && Object.keys(i.binary || {}).length > 0)\n);\n\nreturn [{ json: { isEmpty: !hasData } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        384
      ],
      "id": "2f92e72a-6d1c-457d-99c4-69bd6b734b55",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2b79b83b-98e3-47d2-82e5-673872b1b8f2",
              "leftValue": "={{ $json.isEmpty }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -768,
        384
      ],
      "id": "4e0ee1bf-669d-4026-b88a-b3db94302b14",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "vendors",
        "filters": {
          "conditions": [
            {
              "keyName": "gstin",
              "keyValue": "={{ $json.vendor_gstin }}"
            },
            {
              "keyName": "org_id",
              "keyValue": "={{ $json.org_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1168,
        384
      ],
      "id": "6b5cc10b-0af1-48da-abe7-b7423246c189",
      "name": "check if vendor absent",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "url": "https://www.zohoapis.in/books/v3/contacts",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "contact_name",
              "value": "={{ $('get invoice').item.json.vendor_name }}"
            },
            {
              "name": "organization_id",
              "value": "60047531601"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Edit Fields').item.json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "90eb15ca-957f-4617-9f48-bdca36cc9be7",
      "name": "check vendor in zoho",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -368,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node â€” Run Once for All Items\nfunction cleanGSTIN(v) {\n  return (v ?? '').toString().toUpperCase().replace(/\\s+/g, '');\n}\n\n// 1) GSTIN from \"get invoice\"\nconst targetGSTIN = cleanGSTIN($('get invoice').first().json.vendor_gstin);\n\n// 2) Contacts from the previous HTTP node\n//    If this code node is placed right after the HTTP node, $items('check vendor in zoho')[0].json.contacts should exist.\nconst fromNode = $items('check vendor in zoho')[0]?.json || $json;\nconst contacts = Array.isArray(fromNode.contacts) ? fromNode.contacts : [];\n\n// 3) Find first contact whose gst matches\nlet foundId = null;\n\nif (targetGSTIN && contacts.length) {\n  for (const c of contacts) {\n    const gst = cleanGSTIN(c.gst_no || c.gstin || c.gst || '');\n    if (gst && gst === targetGSTIN) {\n      foundId = c.contact_id || null;\n      break;\n    }\n  }\n}\n\n// 4) Output\nreturn [\n  {\n    json: {\n      present: Boolean(foundId),\n      contact_id: foundId || null\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        208
      ],
      "id": "96b5b6a4-9534-43c7-8fcb-478e0957b8ec",
      "name": "extract"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dadc507c-33da-4844-8a6b-81b488ed1626",
              "leftValue": "={{ $json.present }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        16,
        208
      ],
      "id": "05df0219-da21-4fae-b114-c607353ea655",
      "name": "is present"
    },
    {
      "parameters": {
        "tableId": "vendors",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "org_id",
              "fieldValue": "={{ $('get invoice').item.json.org_id }}"
            },
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $json.contact_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('get invoice').item.json.vendor_name }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('get invoice').item.json.vendor_name }}"
            },
            {
              "fieldId": "gstin",
              "fieldValue": "={{ $('get invoice').item.json.vendor_gstin }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        304,
        80
      ],
      "id": "f5805344-4eda-452d-8c99-15c91a1ee7b9",
      "name": "add vendor from zoho",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.zohoapis.in/books/v3/contacts",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "organization_id",
              "value": "60047531601"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Edit Fields').item.json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contact_name\": \"{{ $('get invoice').item.json.vendor_name }}\",\n  \"contact_type\": \"vendor\",\n  \"gst_no\": \"{{ $('get invoice').item.json.vendor_gstin }}\",\n\"gst_treatment\": \"business_registered_regular\",\n  \"billing_address\": {\n    \"address\": \"{{ ($json.payload.vendor.address ?? '').toString().replace(/[\"'`\\\\]/g, '').replace(/[\\r\\n\\t]/g, ' ').trim()}}\"\n  }\n}",
        "options": {}
      },
      "id": "b44303e4-4c3c-4cf0-931b-62db1197635f",
      "name": "create vendor in zoho",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        544,
        320
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "invoices_raw",
        "filters": {
          "conditions": [
            {
              "keyName": "ingestion_id",
              "keyValue": "={{ $('get invoice').item.json.ingestion_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        304,
        320
      ],
      "id": "aedbf9ab-0d44-4b7c-81ea-b1b258955bbd",
      "name": "get raw invoice",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "tableId": "vendors",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "org_id",
              "fieldValue": "={{ $('get invoice').item.json.org_id }}"
            },
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $json.contact.contact_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('get invoice').item.json.vendor_name }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('get invoice').item.json.vendor_name }}"
            },
            {
              "fieldId": "gstin",
              "fieldValue": "={{ $('get invoice').item.json.vendor_gstin }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        800,
        320
      ],
      "id": "5944d5dd-22c7-4390-a4fb-76eb235af2c1",
      "name": "add new vendor",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "invoice_id"
            },
            {
              "name": "access_token"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1808,
        384
      ],
      "id": "b9eaa720-b0f8-4d37-9525-0d016e4d391e",
      "name": "When Executed by Another Workflow"
    }
  ],
  "pinData": {},
  "connections": {
    "Edit Fields": {
      "main": [
        [
          {
            "node": "get invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get invoice": {
      "main": [
        [
          {
            "node": "check if vendor absent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "check vendor in zoho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check if vendor absent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check vendor in zoho": {
      "main": [
        [
          {
            "node": "extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract": {
      "main": [
        [
          {
            "node": "is present",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "is present": {
      "main": [
        [
          {
            "node": "add vendor from zoho",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get raw invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create vendor in zoho": {
      "main": [
        [
          {
            "node": "add new vendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get raw invoice": {
      "main": [
        [
          {
            "node": "create vendor in zoho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "13f33a1e-cbdb-47b1-acc7-e634704c33d3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6879c4d326ba21d1ccb65b8539bd2e9444dca559b9181b34dd45567cb223f8c9"
  },
  "id": "ooiG45OA4s7TiIJg",
  "tags": []
}