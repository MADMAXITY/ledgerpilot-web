{
  "name": "LedgerPilot - Executioner",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "24438124-6506-4f72-a961-dc6a31f5c772",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -1184,
        96
      ],
      "webhookId": "telegram-webhook-id",
      "credentials": {
        "telegramApi": {
          "id": "xmSTaUUm8kQcYX8o",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "file-exists-condition",
              "leftValue": "={{ $('Telegram Trigger').message.document ? 'document' : ($('Telegram Trigger').message.photo ? 'photo' : 'none') }}",
              "rightValue": "none",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3bad776c-4661-458d-bff2-2dcbd08f7472",
      "name": "Check File Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -736,
        96
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "pdf-condition",
              "leftValue": "={{ $('Telegram Trigger').item.json.message.document && $('Telegram Trigger').item.json.message.document.mime_type ? $('Telegram Trigger').item.json.message.document.mime_type : 'none' }}",
              "rightValue": "application/pdf",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e8979263-0426-40cd-b44b-5ed423fbb9e6",
      "name": "Check if PDF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -512,
        -96
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "photo-condition",
              "leftValue": "={{ $('Telegram Trigger').item.json.message.photo ? 'photo' : 'none' }}",
              "rightValue": "photo",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "image-document-condition",
              "leftValue": "={{ $('Telegram Trigger').item.json.message.document && $('Telegram Trigger').item.json.message.document.mime_type ? $('Telegram Trigger').item.json.message.document.mime_type : 'none' }}",
              "rightValue": "image/",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "cef30d50-5e01-4c60-9369-9dc5c26629a8",
      "name": "Check if Image",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -512,
        96
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Telegram Trigger').item.json.message.document.file_id }}",
        "additionalFields": {}
      },
      "id": "f98be853-98cc-4c82-b1e5-4e485ff01bfd",
      "name": "Download PDF",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        -288,
        -96
      ],
      "webhookId": "44e86cfb-b346-4355-aa79-ad03874278b3",
      "credentials": {
        "telegramApi": {
          "id": "xmSTaUUm8kQcYX8o",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{$('Telegram Trigger').item.json.message.photo ?$('Telegram Trigger').item.json.message.photo[$('Telegram Trigger').item.json.message.photo.length - 1].file_id : $('Telegram Trigger').item.json.message.document.file_id }}",
        "additionalFields": {}
      },
      "id": "f86b6fa8-954e-460f-9ede-069deaafa273",
      "name": "Download Image",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        -288,
        96
      ],
      "webhookId": "c4057590-0523-48df-babc-5e85bf588461",
      "credentials": {
        "telegramApi": {
          "id": "xmSTaUUm8kQcYX8o",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "‚ö†Ô∏è No file detected in your message. Please send a PDF or image file (JPEG, JPG, PNG) for invoice processing.",
        "additionalFields": {}
      },
      "id": "e6de25ed-72ca-4d18-bb44-0b1e7b36aed2",
      "name": "No File Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        -512,
        288
      ],
      "webhookId": "ac82497c-4f2e-4990-910d-ec7d3dcd856c",
      "credentials": {
        "telegramApi": {
          "id": "xmSTaUUm8kQcYX8o",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7f2fcc5c-51e4-41b8-a9bc-8b428fb03350",
              "name": "ORG_ID",
              "value": "60047531601",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -960,
        96
      ],
      "id": "85005788-c3e5-45de-a9b4-25dd80d980ea",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "content": "## Trigger",
        "height": 544,
        "width": 1280,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1248,
        -112
      ],
      "typeVersion": 1,
      "id": "3c6e319a-b316-4e3a-bfd4-314f2d7f0c96",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "return items.map(it => {\n  const uid  = $('Telegram Trigger').first().json.message.from.id || 'anon';\n  const ts   = new Date().toISOString().replace(/[:.]/g, '-');\n  const rand = Math.random().toString(36).slice(2, 8);\n\n  const extRaw = (it.binary?.data?.fileExtension || 'pdf').toLowerCase();\n  const ext    = extRaw.replace('.', ''); // normalize (remove dot if any)\n\n  // Map common extensions to correct MIME types\n  const mimeMap = {\n    pdf:  'application/pdf',\n    jpg:  'image/jpeg',\n    jpeg: 'image/jpeg',\n    png:  'image/png',\n    webp: 'image/webp'\n  };\n\n  const mimeType = mimeMap[ext] || 'application/octet-stream'; // fallback\n\n  const isImage  = mimeType.startsWith('image/');\n  const fileType = isImage ? 'IMAGE' : 'PDF';\n\n  // Path: separate invoices-original vs invoices-images if needed\n  const folder = isImage ? 'invoices-images' : 'invoices-original';\n\n  it.json.supabasePath = `${folder}/${uid}/inv-${ts}-${rand}.${ext}`;\n  it.json.fileType = fileType;\n  it.json.mimeType = mimeType; // ‚úÖ set correct MIME type\n\n  return it;\n});\n"
      },
      "id": "8bf31545-741b-4dfc-abbe-23b78cde168d",
      "name": "Process File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        96,
        -32
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://fdwerzjeipmpbgzcjdit.supabase.co/storage/v1/object/{{ $json.supabasePath }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $json.mimeType }}"
            },
            {
              "name": "x-upsert",
              "value": "true"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "id": "e1db53d8-5a56-4b52-b536-9c07fcf48f52",
      "name": "Upload to Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        -32
      ],
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "=üìÑ Processing your invoice {{ $('Process File').item.json.fileType }}\nüîÑ File uploaded successfully!\n‚è≥ Starting data extraction...",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "d5c8840c-20a5-4b56-ac30-255eacd48679",
      "name": "Processing Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        544,
        -32
      ],
      "webhookId": "6e0336a0-96d9-49e7-b78d-987cf9dfbdb9",
      "credentials": {
        "telegramApi": {
          "id": "xmSTaUUm8kQcYX8o",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "tableId": "files",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "org_id",
              "fieldValue": "={{ $('Edit Fields').item.json.ORG_ID }}"
            },
            {
              "fieldId": "source",
              "fieldValue": "telegram"
            },
            {
              "fieldId": "source_ref",
              "fieldValue": "={{ $('Telegram Trigger').item.json.message.message_id }}"
            },
            {
              "fieldId": "storage_key",
              "fieldValue": "={{ $('Upload to Supabase').item.json.Key }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Process File').item.json.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Download Image').item.json.result.file_size || $('Download PDF').item.json.result.file_size }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        752,
        -32
      ],
      "id": "0778f361-eb64-44fb-8564-cf1f99789140",
      "name": "files",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "content": "## Upload Invoice\n",
        "height": 256,
        "width": 1040,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        48,
        -112
      ],
      "typeVersion": 1,
      "id": "302ad425-c0b2-49f6-b36f-3d030f7a141a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "tableId": "ingestions",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "org_id",
              "fieldValue": "={{ $json.org_id }}"
            },
            {
              "fieldId": "file_id",
              "fieldValue": "={{ $json.file_id }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "queued"
            },
            {
              "fieldId": "approval_mode",
              "fieldValue": "auto"
            },
            {
              "fieldId": "approval_status",
              "fieldValue": "pending"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        944,
        -32
      ],
      "id": "3b50c952-4d68-4d4c-91f5-ba2b29b54653",
      "name": "ingestions",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "content": "## Set Vars\n",
        "height": 256,
        "width": 848,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        48,
        176
      ],
      "typeVersion": 1,
      "id": "7eca2b36-2f05-43db-b326-14a2e2858404",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://accounts.zoho.in/oauth/v2/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "refresh_token",
              "value": "={{ $json.refresh_token }}"
            },
            {
              "name": "client_id",
              "value": "={{ $json.client_id }}"
            },
            {
              "name": "client_secret",
              "value": "={{ $json.client_secret }}"
            },
            {
              "name": "grant_type",
              "value": "refresh_token"
            }
          ]
        },
        "options": {}
      },
      "id": "2a1d8b2b-ed8d-43a6-a22d-a8ae59f9812d",
      "name": "Refresh Zoho Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        256
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "259f35d6-2fa3-47d5-b111-6f6edf3049ae",
              "name": "org_id",
              "value": "={{ $('ingestions').item.json.org_id }}",
              "type": "string"
            },
            {
              "id": "4a6ed08c-f30d-4e96-8994-3af8d6c25d6a",
              "name": "file_id",
              "value": "={{ $('ingestions').item.json.file_id }}",
              "type": "number"
            },
            {
              "id": "851a5a62-f4bc-4796-a6cc-9bb5e7ec4a68",
              "name": "storage_key",
              "value": "={{ $('files').item.json.storage_key }}",
              "type": "string"
            },
            {
              "id": "6bc4c27c-f194-48bc-ac8f-1e7484c497ed",
              "name": "mime_type",
              "value": "={{ $('files').item.json.mime_type }}",
              "type": "string"
            },
            {
              "id": "29286d4c-ace7-4c64-bc83-7072c19369ac",
              "name": "ingestion_id",
              "value": "={{ $('ingestions').item.json.ingestion_id }}",
              "type": "number"
            },
            {
              "id": "3aff31e3-fd1a-4cd6-a7b5-fb8f55da487a",
              "name": "access_token",
              "value": "={{ $json.access_token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        544,
        256
      ],
      "id": "94a4b317-cdb0-4d76-a299-f1002f8e6c0c",
      "name": "PostUpload Vars"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "oauth_tokens",
        "filters": {
          "conditions": [
            {
              "keyName": "org_id",
              "keyValue": "={{ $json.org_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        96,
        256
      ],
      "id": "cc01bb83-7755-41f1-9528-a70ac50102ce",
      "name": "get zoho tokens",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "ingestions",
        "filters": {
          "conditions": [
            {
              "keyName": "ingestion_id",
              "condition": "eq",
              "keyValue": "={{ $json.ingestion_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "extracting"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        752,
        256
      ],
      "id": "9a6dfb64-c164-4685-9142-fb02665d2968",
      "name": "Status -> Extracting",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "content": "## Processing Pipeline\n\n\n",
        "height": 224,
        "width": 2208,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1248,
        464
      ],
      "typeVersion": 1,
      "id": "1214f368-1cd7-4adf-973a-9a7c7c088f6d",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "1sUaqZSX8vyY0MwV",
          "mode": "list",
          "cachedResultUrl": "/workflow/1sUaqZSX8vyY0MwV",
          "cachedResultName": "LedgerPilot Extract"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "mime_type": "={{ $('PostUpload Vars').item.json.mime_type }}",
            "storage_key": "={{ $('PostUpload Vars').item.json.storage_key }}",
            "ingestion_id": "={{ $json.ingestion_id.toString() }}",
            "file_id": "={{ $json.file_id.toString() }}",
            "org_id": "={{ $json.org_id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "mime_type",
              "displayName": "mime_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "ingestion_id",
              "displayName": "ingestion_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "storage_key",
              "displayName": "storage_key",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "file_id",
              "displayName": "file_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "org_id",
              "displayName": "org_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1200,
        528
      ],
      "id": "589531bc-dce4-4ab1-8940-1debd4cb7944",
      "name": "Extract",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "tableId": "invoices_raw",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "org_id",
              "fieldValue": "={{ $('PostUpload Vars').item.json.org_id }}"
            },
            {
              "fieldId": "ingestion_id",
              "fieldValue": "={{ $('PostUpload Vars').item.json.ingestion_id }}"
            },
            {
              "fieldId": "payload",
              "fieldValue": "={{ $json.output }}"
            },
            {
              "fieldId": "extractor",
              "fieldValue": "gemini-2.5-flash"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -976,
        528
      ],
      "id": "c30f2aa3-ca8d-4a7a-bb55-e49ce4168c65",
      "name": "invoices_raw",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Kn4lwIFwDbwHEnNJ",
          "mode": "list",
          "cachedResultUrl": "/workflow/Kn4lwIFwDbwHEnNJ",
          "cachedResultName": "LedgerPilot Normalize"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "raw_id": "={{ $json.raw_id.toString() }}"
          },
          "matchingColumns": [
            "raw_id"
          ],
          "schema": [
            {
              "id": "raw_id",
              "displayName": "raw_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -768,
        528
      ],
      "id": "c6d250c8-2c74-4b76-8cd3-1de6005b5eb0",
      "name": "Normalize",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "gL2EA4a7gQOJoH17",
          "mode": "list",
          "cachedResultUrl": "/workflow/gL2EA4a7gQOJoH17",
          "cachedResultName": "LedgerPilot - ItemMatch Vector"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "invoice_id": "={{ $json.invoice_id.toString() }}"
          },
          "matchingColumns": [
            "invoice_id"
          ],
          "schema": [
            {
              "id": "invoice_id",
              "displayName": "invoice_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -544,
        528
      ],
      "id": "734c50aa-1e55-46a2-a1a5-229498c28ada",
      "name": "Item Matching",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "ooiG45OA4s7TiIJg",
          "mode": "list",
          "cachedResultUrl": "/workflow/ooiG45OA4s7TiIJg",
          "cachedResultName": "LedgerPilot - HandleVendor"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "invoice_id": "={{ $json.invoice_id.toString() }}",
            "access_token": "={{ $('PostUpload Vars').item.json.access_token }}"
          },
          "matchingColumns": [
            "invoice_id"
          ],
          "schema": [
            {
              "id": "invoice_id",
              "displayName": "invoice_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "access_token",
              "displayName": "access_token",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -320,
        528
      ],
      "id": "180619db-1622-4be6-a6be-cf735baf8aab",
      "name": "HandleVendor",
      "executeOnce": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "GZUylp9DySdt57rS",
          "mode": "list",
          "cachedResultUrl": "/workflow/GZUylp9DySdt57rS",
          "cachedResultName": "LedgerPilot - UpdateItems"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "invoice_id": "={{ $('Normalize').item.json.invoice_id.toString() }}",
            "organization_id": "={{ $('PostUpload Vars').item.json.org_id }}",
            "access_token": "={{ $('PostUpload Vars').item.json.access_token }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "invoice_id",
              "displayName": "invoice_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "organization_id",
              "displayName": "organization_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "access_token",
              "displayName": "access_token",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -96,
        528
      ],
      "id": "a21de934-0807-4878-b11f-790fbede52c1",
      "name": "Update Items",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Pb3CCCqu1OE9iiuf",
          "mode": "list",
          "cachedResultUrl": "/workflow/Pb3CCCqu1OE9iiuf",
          "cachedResultName": "LedgerPilot - BillPayloadBuilder"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "invoice_id": "={{ $('Normalize').item.json.invoice_id.toString() }}"
          },
          "matchingColumns": [
            "invoice_id"
          ],
          "schema": [
            {
              "id": "invoice_id",
              "displayName": "invoice_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        128,
        528
      ],
      "id": "dd90e7b4-ed07-46f5-8cab-f724311e317b",
      "name": "create payload",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "ingestions",
        "filters": {
          "conditions": [
            {
              "keyName": "ingestion_id",
              "condition": "eq",
              "keyValue": "={{ $('PostUpload Vars').item.json.ingestion_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "bill_payload_draft",
              "fieldValue": "={{ $json.zoho_bill_payload }}"
            },
            {
              "fieldId": "approval_status",
              "fieldValue": "ready"
            },
            {
              "fieldId": "status",
              "fieldValue": "matched"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        336,
        528
      ],
      "id": "bb7ed389-f679-4d15-ba36-1f494e49f93d",
      "name": "update ingestion",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "2G6eQV7nPqqxvTLR",
          "mode": "list",
          "cachedResultUrl": "/workflow/2G6eQV7nPqqxvTLR",
          "cachedResultName": "LedgerPilot - BillHandler"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        544,
        528
      ],
      "id": "a5fb097e-d750-4ca7-9f6b-6a754f6535c7",
      "name": "BillHandler"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Exists": {
      "main": [
        [
          {
            "node": "Check if PDF",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check if Image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No File Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if PDF": {
      "main": [
        [
          {
            "node": "Download PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Image": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Check File Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process File": {
      "main": [
        [
          {
            "node": "Upload to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Supabase": {
      "main": [
        [
          {
            "node": "Processing Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processing Notification": {
      "main": [
        [
          {
            "node": "files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "files": {
      "main": [
        [
          {
            "node": "ingestions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download PDF": {
      "main": [
        [
          {
            "node": "Process File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "Process File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refresh Zoho Token": {
      "main": [
        [
          {
            "node": "PostUpload Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ingestions": {
      "main": [
        [
          {
            "node": "get zoho tokens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get zoho tokens": {
      "main": [
        [
          {
            "node": "Refresh Zoho Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostUpload Vars": {
      "main": [
        [
          {
            "node": "Status -> Extracting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Status -> Extracting": {
      "main": [
        [
          {
            "node": "Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract": {
      "main": [
        [
          {
            "node": "invoices_raw",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "invoices_raw": {
      "main": [
        [
          {
            "node": "Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize": {
      "main": [
        [
          {
            "node": "Item Matching",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Item Matching": {
      "main": [
        [
          {
            "node": "HandleVendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HandleVendor": {
      "main": [
        [
          {
            "node": "Update Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Items": {
      "main": [
        [
          {
            "node": "create payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create payload": {
      "main": [
        [
          {
            "node": "update ingestion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update ingestion": {
      "main": [
        [
          {
            "node": "BillHandler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e8bb3bdb-691f-4b6c-84b9-3f0c86906834",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6879c4d326ba21d1ccb65b8539bd2e9444dca559b9181b34dd45567cb223f8c9"
  },
  "id": "4OIp97dt6IbMjSOX",
  "tags": []
}