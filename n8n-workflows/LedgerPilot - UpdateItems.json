{
  "name": "LedgerPilot - UpdateItems",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ad195641-e0da-464b-a058-7296b46d3fc8",
              "name": "invoice_id",
              "value": "={{ $json.invoice_id }}",
              "type": "string"
            },
            {
              "id": "594548b7-6bc8-4083-b7a2-d64c61a51c61",
              "name": "org_id",
              "value": "={{ $json.organization_id }}",
              "type": "string"
            },
            {
              "id": "031311b8-2aa4-4e86-ad4d-1d2573c54c66",
              "name": "access_token",
              "value": "={{ $json.access_token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1280,
        368
      ],
      "id": "c800183a-5cfc-4b1e-b4d3-0c8a3461baf6",
      "name": "set"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "invoice_lines",
        "filters": {
          "conditions": [
            {
              "keyName": "invoice_id",
              "condition": "eq",
              "keyValue": "={{ $('set').item.json.invoice_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1056,
        368
      ],
      "id": "4eabf03d-5864-4c55-a5e1-ebbd31af665e",
      "name": "Get many rows",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -848,
        368
      ],
      "id": "f52372b5-8ea0-40ad-94fb-b4e205c6f39c",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.match_state }}",
                    "rightValue": "auto_matched",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3648bbcd-b27f-4620-8d77-eb53000baa89"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "matched"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1bd28dac-d470-4cfd-9c47-1baabfb011f4",
                    "leftValue": "={{ $json.match_state }}",
                    "rightValue": "to_create",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "create"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -544,
        368
      ],
      "id": "ab30f945-9265-41c6-bf77-dccdbc8e76db",
      "name": "Switch"
    },
    {
      "parameters": {
        "url": "=https://www.zohoapis.in/books/v3/items/{{ $json.item_id }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "organization_id",
              "value": "60047531601"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "=Authorization",
              "value": "=Bearer {{ $('set').item.json.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        96
      ],
      "id": "3d6a6fa1-fd75-4b2a-b2c6-3f131de58d60",
      "name": "get item from zoho"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node — Run Once for All Items\n// From Zoho:  $input.first().json.item.purchase_rate\n// From Bill:  $('Switch').first().json.rate\n\nconst toNum = (v) => {\n  if (v === null || v === undefined || v === '') return null;\n  const n = Number(v);\n  return Number.isFinite(n) ? n : null;\n};\nconst round2 = (n) => Math.round((n + Number.EPSILON) * 100) / 100;\n\nconst zohoItem = $input.first().json?.item || {};\nconst itemRateRaw = zohoItem.purchase_rate;\nconst billRateRaw = $('Switch').first().json?.rate;\n\nconst itemRate = toNum(itemRateRaw);\nconst billRate = toNum(billRateRaw);\n\nif (itemRate === null || billRate === null) {\n  return [{\n    json: {\n      rate_match: false,\n      reason: 'Missing or invalid rate value(s)',\n      item_rate_raw: itemRateRaw ?? null,\n      bill_rate_raw: billRateRaw ?? null\n    }\n  }];\n}\n\n// Compare at 2-decimal precision (adjust if you want exact compare)\nconst match = round2(itemRate) === round2(billRate);\n\nreturn [{\n  json: {\n    rate_match: match,\n    item_rate: round2(itemRate),\n    bill_rate: round2(billRate),\n    diff: round2(billRate - itemRate)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        96
      ],
      "id": "b0cc52ec-cec6-4791-bcf2-6025b27b3287",
      "name": "compare rate"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "87d4a471-022c-412b-9301-051624b73470",
              "leftValue": "={{ $json.rate_match }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        144,
        96
      ],
      "id": "24a82ea3-38f5-4b36-8303-bf4e8b78b69d",
      "name": "is rate same"
    },
    {
      "parameters": {
        "jsCode": "// Inputs:\n//  - From GET item node: $('Get Item').first().json.item.{name, rate}\n//  - From bill/Switch:   $('Switch').first().json.rate   (new purchase_rate)\n\nconst item = $('get item from zoho').last().json.item || {};\nconst purchaseRate = $('Switch').last().json.rate;\n\nif (!item.item_id) {\n  throw new Error('Missing item.item_id from GET response');\n}\nif (purchaseRate === undefined || purchaseRate === null || purchaseRate === '') {\n  throw new Error('Missing new purchase_rate from Switch');\n}\n\nreturn [{\n  json: {\n    item_id: item.item_id,\n    body: {\n      name: item.name,               // required\n      rate: item.rate,               // required (sell price, keep unchanged)\n      purchase_rate: Number(purchaseRate) // value you want to update\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        384,
        112
      ],
      "id": "0683a9d0-9314-4fe3-853f-6dbdda87fa01",
      "name": "build payload"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://www.zohoapis.in/books/v3/items/{{ $json.item_id }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "organization_id",
              "value": "={{ $('set').item.json.org_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('set').item.json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        624,
        112
      ],
      "id": "ac07f74f-5679-48f1-a418-c769d2c0f87b",
      "name": "update item purchase rate"
    },
    {
      "parameters": {
        "jsCode": "// Collect all pages of chart of accounts\nconst orgId = $('set').first().json.org_id;\nconst token = $('Refresh Zoho Token').first().json.access_token;\nconst baseUrl = $json.zoho_base_url || 'https://www.zohoapis.in';\n\n// helper to fetch a page\nasync function fetchPage(page=1, perPage=200) {\n  return this.helpers.httpRequest({\n    method: 'GET',\n    url: `${baseUrl}/books/v3/chartofaccounts`,\n    qs: { organization_id: orgId, per_page: perPage, page },\n    headers: { Authorization: `Zoho-oauthtoken ${token}` },\n    json: true,\n  });\n}\n\n// start with page 1 (already requested or fetch again—safe either way)\nlet page = 1;\nlet all = [];\nwhile (true) {\n  const res = await fetchPage.call(this, page);\n  const list = res?.chartofaccounts || [];\n  all = all.concat(list);\n\n  const ctx = res?.page_context || {};\n  if (!ctx.has_more_page) break;\n  page = (ctx.page || page) + 1;\n}\n\nreturn [{ json: { chartofaccounts: all, count: all.length } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        480
      ],
      "id": "e77b7822-5218-4caf-9dfe-4760e36ed4f1",
      "name": "get accounts"
    },
    {
      "parameters": {
        "jsCode": "// Build Create Item (inventory) payload with Sales=\"Sales\", Purchases=\"Materials\"\nconst line = $('Switch').first().json || {};\nconst ids  = $input.first().json;\n\nconst purchase_rate = Number(line.rate);\nif (!Number.isFinite(purchase_rate)) throw new Error('Missing/invalid purchase_rate from Switch.rate');\n\nconst rate = Math.round((purchase_rate * 1.20 + Number.EPSILON) * 100) / 100;\n\nconst body = {\n  name: line.item_name + \" 3\" || 'New Inventory Item',\n  rate,                       // Selling price (+20%)\n  is_taxable: true,           // Tax preference → Taxable (India)\n  hsn_or_sac: line.hsn_sac || undefined,\n  sku: line.sku || undefined,\n\n  item_type: 'inventory',\n  purchase_rate,\n\n  account_id: ids.account_id,                         // Sales  → \"Sales\"\n  purchase_account_id: ids.purchase_account_id,       // Purch. → \"Materials\"\n  inventory_account_id: ids.inventory_account_id,     // Stock  → \"Inventory Asset\"\n\n  description: line.item_name || undefined,\n};\n\nreturn [{ json: { item_create_body: body } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        480
      ],
      "id": "693be026-9aae-49af-9703-00d65d7e38a8",
      "name": "build payload for create item"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.zohoapis.in/books/v3/items",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "organization_id",
              "value": "={{ $('set').item.json.org_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('set').item.json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.item_create_body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        384,
        480
      ],
      "id": "6e32c5c3-a3f0-4d20-ba1d-f7795ce93ee4",
      "name": "create item"
    },
    {
      "parameters": {
        "jsCode": "// Inputs: $items('List Accounts')[0].json.chartofaccounts\nconst accts = $input.first().json.chartofaccounts || [];\nconst want = {\n  sales: 'Sales',                 // Sales Information → \"Sales\"\n  purchases: 'Materials',         // Purchase Information → \"Materials\"\n  inventory: 'Inventory Asset',   // Track Inventory → \"Inventory Asset\"\n};\n\nfunction byName(name) {\n  const n = (name||'').toLowerCase();\n  return accts.find(a => (a.account_name||'').toLowerCase() === n) || null;\n}\n\nconst salesAcc = byName(want.sales);\nconst purchAcc = byName(want.purchases);\nconst invAcc   = byName(want.inventory);\n\nif (!salesAcc)  throw new Error(`Account not found: ${want.sales}`);\nif (!purchAcc)  throw new Error(`Account not found: ${want.purchases}`);\nif (!invAcc)    throw new Error(`Account not found: ${want.inventory}`);\n\nreturn [{\n  json: {\n    account_id: salesAcc.account_id,                 // Sales\n    purchase_account_id: purchAcc.account_id,        // Materials\n    inventory_account_id: invAcc.account_id,         // Inventory Asset\n    account_names: {\n      sales: salesAcc.account_name,\n      purchases: purchAcc.account_name,\n      inventory: invAcc.account_name\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -32,
        480
      ],
      "id": "794a99e8-e8ac-4a9c-a096-dbf7a09b504a",
      "name": "pick accounts"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "invoice_lines",
        "filters": {
          "conditions": [
            {
              "keyName": "line_id",
              "condition": "eq",
              "keyValue": "={{ $('Switch').item.json.line_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "item_id",
              "fieldValue": "={{ $json.item.item_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        624,
        480
      ],
      "id": "6669344b-c203-4651-9c14-a24bf7907e40",
      "name": "update invoice line",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "tableId": "items_catalog_duplicate",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "org_id",
              "fieldValue": "={{ $('set').item.json.org_id }}"
            },
            {
              "fieldId": "item_id",
              "fieldValue": "={{ $('create item').item.json.item.item_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $('create item').item.json.item.name }}"
            },
            {
              "fieldId": "hsn_raw",
              "fieldValue": "={{ $('create item').item.json.item.hsn_or_sac }}"
            },
            {
              "fieldId": "source",
              "fieldValue": "={{ $('create item').item.json.item }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        848,
        480
      ],
      "id": "c61a0f12-2cc0-4918-9e7f-150ed6dfbb8f",
      "name": "update catalogue",
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "name": "Get Individual Embedding",
      "position": [
        1312,
        608
      ],
      "id": "8375705d-2ebc-44be-a143-ff761c8d2e05",
      "typeVersion": 4.2,
      "credentials": {
        "openAiApi": {
          "id": "Q2TQX21KBUqSSNxI",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "https://fdwerzjeipmpbgzcjdit.supabase.co/rest/v1/items_catalog_duplicate",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "item_id",
              "value": "=eq.{{ $('BuildContent').item.json.item_id }}"
            },
            {
              "name": "org_id",
              "value": "=eq.{{ $('BuildContent').item.json.org_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=minimal"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "embedding",
              "value": "={{ $json.data[0].embedding }}"
            }
          ]
        },
        "options": {
          "timeout": 100000000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "name": "Update Individual Embedding",
      "position": [
        1520,
        608
      ],
      "id": "e9e52f84-878d-4a61-869d-0d58bb31953a",
      "typeVersion": 4.2,
      "retryOnFail": true,
      "maxTries": 5,
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(i => {\n  const r = i.json;\n  const parts = [\n    r.name || '',\n    r.hsn8 ? `HSN:${r.hsn8}` : '',\n    r.description || ''\n  ].filter(Boolean);\n  return { json: { org_id: r.org_id, item_id: r.item_id, content: parts.join(' | ').replace(/\\s+/g,' ').trim() } };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        608
      ],
      "id": "f8138ed7-a174-478b-ae0d-04a801790729",
      "name": "BuildContent"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "invoice_id"
            },
            {
              "name": "organization_id"
            },
            {
              "name": "access_token"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1504,
        368
      ],
      "id": "159773b1-751e-421e-95a7-cae16475c47e",
      "name": "When Executed by Another Workflow"
    }
  ],
  "pinData": {},
  "connections": {
    "set": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "get item from zoho",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get accounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get item from zoho": {
      "main": [
        [
          {
            "node": "compare rate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "compare rate": {
      "main": [
        [
          {
            "node": "is rate same",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "is rate same": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "build payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build payload": {
      "main": [
        [
          {
            "node": "update item purchase rate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update item purchase rate": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get accounts": {
      "main": [
        [
          {
            "node": "pick accounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build payload for create item": {
      "main": [
        [
          {
            "node": "create item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create item": {
      "main": [
        [
          {
            "node": "update invoice line",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pick accounts": {
      "main": [
        [
          {
            "node": "build payload for create item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update invoice line": {
      "main": [
        [
          {
            "node": "update catalogue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update catalogue": {
      "main": [
        [
          {
            "node": "BuildContent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Individual Embedding": {
      "main": [
        [
          {
            "node": "Update Individual Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Individual Embedding": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BuildContent": {
      "main": [
        [
          {
            "node": "Get Individual Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "57b278f4-45cd-4310-b181-ed08717eae8e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6879c4d326ba21d1ccb65b8539bd2e9444dca559b9181b34dd45567cb223f8c9"
  },
  "id": "GZUylp9DySdt57rS",
  "tags": []
}