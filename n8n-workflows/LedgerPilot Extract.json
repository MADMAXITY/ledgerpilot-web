{
  "name": "LedgerPilot Extract",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "mime_type"
            },
            {
              "name": "ingestion_id"
            },
            {
              "name": "storage_key"
            },
            {
              "name": "file_id"
            },
            {
              "name": "org_id"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        32,
        224
      ],
      "id": "236d627a-9dd6-4197-98d1-5fa46c72c0aa",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://fdwerzjeipmpbgzcjdit.supabase.co/storage/v1/object/sign/{{ $json.images[0].key }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "expiresIn",
              "value": "36000"
            }
          ]
        },
        "options": {}
      },
      "id": "193abb94-4f0b-44f9-bc46-32ccd907fbcd",
      "name": "GetSignedUrl",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        864,
        96
      ],
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://fdwerzjeipmpbgzcjdit.supabase.co/storage/v1/object/sign/{{ $json.storage_key }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "expiresIn",
              "value": "36000"
            }
          ]
        },
        "options": {}
      },
      "id": "f69a22d9-f8a0-4e77-90eb-a341aa23b934",
      "name": "GetSignedUrl1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        848,
        320
      ],
      "credentials": {
        "supabaseApi": {
          "id": "YGlNQsor4RTqQEn4",
          "name": "InvoicePilot"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "application",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "47eeb858-6740-45c1-a830-035de3d1ffd1"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fc0272cd-fe59-450c-9339-74004cae61a3",
                    "leftValue": "={{ $json.mime_type }}",
                    "rightValue": "image",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        400,
        224
      ],
      "id": "b64e23c6-a7a9-4ac2-bb12-5f8ffc2c601f",
      "name": "Switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://kee33d7u91.execute-api.ap-south-1.amazonaws.com/production/convert",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "=application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "pdf_key",
              "value": "={{ $('When Executed by Another Workflow').item.json.storage_key }}"
            },
            {
              "name": "user_id",
              "value": "={{ $('When Executed by Another Workflow').item.json.org_id }}"
            },
            {
              "name": "invoice_id",
              "value": "={{ $('When Executed by Another Workflow').item.json.ingestion_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        96
      ],
      "id": "a0c3d394-4ef2-4365-9d1f-40e2285cb528",
      "name": "pdf2img"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "model",
              "value": "google/gemini-2.5-flash"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "a73c5bfd-b7a9-4cdb-87de-fd19a1961a4a",
      "name": "OpenRouter Gemini Invoice Extractor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1248,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "// Build the payload as a JS object so you don't fight escaping.\n\nconst rules = `Extract invoice data from the provided image and return a single JSON object that VALIDATES against the schema below.\n\nCRITICAL RULES\n1) The vendor is the ISSUER/SELLER of the invoice. The buyer/receiver is not the vendor.\n   - \"NVSX Electronics LLM\" is the RECEIVING PARTY. Do NOT set this as vendor.\n2) For each line item, split into:\n   - name: a concise product title (≤120 chars), no long specs.\n   - description: trailing specs/codes/model/SKU, and any extra descriptive text.\n     Example: \"HP CONNECTOR USB-C TO RJ45 ADAPTER 8CU1350NWK\"\n       -> name: \"HP CONNECTOR USB-C TO RJ45 ADAPTER\"\n       -> description: \"8CU1350NWK\"\n3) hsn_sac must be digits only (4–8). If missing/unclear, set null.\n4) Numbers must be plain numerics (no currency symbols, no commas). Use dot for decimals.\n5) bill_date in YYYY-MM-DD. If multiple formats exist, normalize to ISO date.\n6) due_days is the number of days from payment terms (e.g., \"21 Days\" → 21). If missing, null.\n7. Line level items sometimes have a value for discount (disc, disc %, Disc%, etc), that should be used for field \"discount_percent\" in line items\n7) If a value is unknown or not present, use null (do NOT invent values).\n8) Output STRICT JSON only. No markdown, comments, or extra keys.\n\nJSON SCHEMA (copy exactly; your JSON MUST validate this):`;\n\nconst schema = {\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Invoice Structured Data v2.2\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"vendor\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"name\":    { \"type\": [\"string\",\"null\"] },\n        \"gstin\":   { \"type\": [\"string\",\"null\"], \"pattern\": \"^[0-9A-Z]{15}$\" },\n        \"address\": { \"type\": [\"string\",\"null\"] }\n      },\n      \"required\": [\"name\",\"gstin\",\"address\"]\n    },\n    \"invoice\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"bill_number\": { \"type\": [\"string\",\"null\"] },\n        \"bill_date\":   { \"type\": [\"string\",\"null\"], \"format\": \"date\" },\n        \"due_days\":    { \"type\": [\"number\",\"null\"], \"minimum\": 0 },\n        \"grand_total\": { \"type\": [\"number\",\"null\"], \"minimum\": 0 }\n      },\n      \"required\": [\"bill_number\",\"bill_date\",\"grand_total\"]\n    },\n    \"line_items\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"additionalProperties\": false,\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"maxLength\": 120,\n            \"pattern\": \".*\\\\S.*\",\n            \"description\": \"Concise product name/title (no long specs)\"\n          },\n          \"description\": { \"type\": [\"string\",\"null\"] },\n          \"hsn_sac\":     { \"type\": [\"string\",\"null\"], \"pattern\": \"^\\\\d{4,8}$\" },\n          \"quantity\":    { \"type\": [\"number\",\"null\"], \"minimum\": 0 },\n          \"rate\":        { \"type\": [\"number\",\"null\"], \"minimum\": 0 },\n          \"amount\":      { \"type\": [\"number\",\"null\"], \"minimum\": 0 },\n          \"discount_percent\": {\n            \"type\": [\"number\",\"null\"],\n            \"minimum\": 0,\n            \"maximum\": 100,\n            \"description\": \"Line-level discount percentage if present\"\n          },\n        },\n        \"required\": [\"name\",\"description\",\"hsn_sac\",\"quantity\",\"rate\",\"amount\"]\n      }\n    }\n  },\n  \"required\": [\"vendor\",\"invoice\",\"line_items\"]\n};\n\n// ---- Build full image URL safely ----\nconst base = 'https://fdwerzjeipmpbgzcjdit.supabase.co/storage/v1';\nconst p = String($json.signedURL || '');  // your incoming signedURL/path\nconst fullUrl = /^https?:\\/\\//i.test(p)\n  ? p\n  : base.replace(/\\/+$/, '') + '/' + p.replace(/^\\/+/, '');\n\nconst payload = {\n  model: \"google/gemini-2.5-flash\",\n  messages: [\n    {\n      role: \"user\",\n      content: [\n        {\n          type: \"text\",\n          // append the schema as serialized JSON to avoid escaping headaches\n          text: `${rules}\\n\\n${JSON.stringify(schema)}`\n        },\n        {\n          type: \"image_url\",\n          image_url: {\n            url: fullUrl\n          }\n        }\n      ]\n    }\n  ]\n};\n\nreturn [{ json: payload }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        208
      ],
      "id": "901524e1-4fb9-4213-b5d6-28746d3a9942",
      "name": "Payload Maker"
    },
    {
      "parameters": {
        "jsCode": "// Parse LLM JSON-like string into a proper object and expose it as $json.output\n\nfunction getRaw() {\n  const root = $input.first()?.json ?? {};\n  return String(root?.choices?.[0]?.message?.content ?? '').trim();\n}\n\n// Safe JSON.parse\nconst tryParse = (txt) => {\n  try { return JSON.parse(txt); } catch (_) { return null; }\n};\n\nlet s = getRaw();\n\n// 1) Extract from fenced code block ```json ... ```\nconst fence = s.match(/```(?:json)?\\s*([\\s\\S]*?)```/i);\nif (fence) s = fence[1].trim();\n\n// 2) Remove a leading \"json\" label, if present\nif (/^json\\s*[\\r\\n]/i.test(s)) s = s.replace(/^json\\s*/i, '').trim();\n\n// 3) First parse attempt\nlet obj = tryParse(s);\n\n// 4) Handle double-encoded JSON (a quoted JSON string)\nif (!obj && /^\"\\s*[\\s\\S]*\\s*\"$/.test(s)) {\n  const inner = tryParse(s);\n  if (typeof inner === 'string') obj = tryParse(inner.trim());\n}\n\n// 5) Fix common issues and retry\nif (!obj) {\n  let t = s\n    .replace(/[“”]/g, '\"')          // smart double quotes -> straight\n    .replace(/[‘’]/g, \"'\")          // smart single quotes -> straight\n    .replace(/\\r\\n/g, '\\n')         // normalize newlines\n    .replace(/,\\s*(?=[}\\]])/g, ''); // trailing commas before } or ]\n  obj = tryParse(t);\n}\n\n// 6) Return wrapped result\nif (!obj) {\n  return [{\n    json: {\n      output: null,\n      _parse_error: true,\n      raw: s\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    output: obj\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1456,
        208
      ],
      "id": "bf268522-a170-4641-a2ec-29aa69be6c7c",
      "name": "Formatter"
    }
  ],
  "pinData": {},
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetSignedUrl": {
      "main": [
        [
          {
            "node": "Payload Maker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetSignedUrl1": {
      "main": [
        [
          {
            "node": "Payload Maker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "pdf2img",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GetSignedUrl1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pdf2img": {
      "main": [
        [
          {
            "node": "GetSignedUrl",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Gemini Invoice Extractor": {
      "main": [
        [
          {
            "node": "Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Payload Maker": {
      "main": [
        [
          {
            "node": "OpenRouter Gemini Invoice Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "36dc4c81-8d0f-458a-928d-b7b07eef0ef9",
  "meta": {
    "instanceId": "6879c4d326ba21d1ccb65b8539bd2e9444dca559b9181b34dd45567cb223f8c9"
  },
  "id": "1sUaqZSX8vyY0MwV",
  "tags": []
}